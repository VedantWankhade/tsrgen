// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.24.4
// source: jira.proto

package service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Jira_GetIssues_FullMethodName = "/Jira/GetIssues"
)

// JiraClient is the client API for Jira service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type JiraClient interface {
	GetIssues(ctx context.Context, in *IssueReq, opts ...grpc.CallOption) (*IssuesRes, error)
}

type jiraClient struct {
	cc grpc.ClientConnInterface
}

func NewJiraClient(cc grpc.ClientConnInterface) JiraClient {
	return &jiraClient{cc}
}

func (c *jiraClient) GetIssues(ctx context.Context, in *IssueReq, opts ...grpc.CallOption) (*IssuesRes, error) {
	out := new(IssuesRes)
	err := c.cc.Invoke(ctx, Jira_GetIssues_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// JiraServer is the server API for Jira service.
// All implementations must embed UnimplementedJiraServer
// for forward compatibility
type JiraServer interface {
	GetIssues(context.Context, *IssueReq) (*IssuesRes, error)
	mustEmbedUnimplementedJiraServer()
}

// UnimplementedJiraServer must be embedded to have forward compatible implementations.
type UnimplementedJiraServer struct {
}

func (UnimplementedJiraServer) GetIssues(context.Context, *IssueReq) (*IssuesRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetIssues not implemented")
}
func (UnimplementedJiraServer) mustEmbedUnimplementedJiraServer() {}

// UnsafeJiraServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to JiraServer will
// result in compilation errors.
type UnsafeJiraServer interface {
	mustEmbedUnimplementedJiraServer()
}

func RegisterJiraServer(s grpc.ServiceRegistrar, srv JiraServer) {
	s.RegisterService(&Jira_ServiceDesc, srv)
}

func _Jira_GetIssues_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IssueReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JiraServer).GetIssues(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Jira_GetIssues_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JiraServer).GetIssues(ctx, req.(*IssueReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Jira_ServiceDesc is the grpc.ServiceDesc for Jira service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Jira_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Jira",
	HandlerType: (*JiraServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetIssues",
			Handler:    _Jira_GetIssues_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "jira.proto",
}
