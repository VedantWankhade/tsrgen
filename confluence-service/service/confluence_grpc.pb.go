// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.24.4
// source: confluence.proto

package service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Confluence_GetPage_FullMethodName    = "/Confluence/GetPage"
	Confluence_CreatePage_FullMethodName = "/Confluence/CreatePage"
)

// ConfluenceClient is the client API for Confluence service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ConfluenceClient interface {
	GetPage(ctx context.Context, in *PageReq, opts ...grpc.CallOption) (*PageRes, error)
	CreatePage(ctx context.Context, in *PageCreateReq, opts ...grpc.CallOption) (*PageRes, error)
}

type confluenceClient struct {
	cc grpc.ClientConnInterface
}

func NewConfluenceClient(cc grpc.ClientConnInterface) ConfluenceClient {
	return &confluenceClient{cc}
}

func (c *confluenceClient) GetPage(ctx context.Context, in *PageReq, opts ...grpc.CallOption) (*PageRes, error) {
	out := new(PageRes)
	err := c.cc.Invoke(ctx, Confluence_GetPage_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *confluenceClient) CreatePage(ctx context.Context, in *PageCreateReq, opts ...grpc.CallOption) (*PageRes, error) {
	out := new(PageRes)
	err := c.cc.Invoke(ctx, Confluence_CreatePage_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ConfluenceServer is the server API for Confluence service.
// All implementations must embed UnimplementedConfluenceServer
// for forward compatibility
type ConfluenceServer interface {
	GetPage(context.Context, *PageReq) (*PageRes, error)
	CreatePage(context.Context, *PageCreateReq) (*PageRes, error)
	mustEmbedUnimplementedConfluenceServer()
}

// UnimplementedConfluenceServer must be embedded to have forward compatible implementations.
type UnimplementedConfluenceServer struct {
}

func (UnimplementedConfluenceServer) GetPage(context.Context, *PageReq) (*PageRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPage not implemented")
}
func (UnimplementedConfluenceServer) CreatePage(context.Context, *PageCreateReq) (*PageRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePage not implemented")
}
func (UnimplementedConfluenceServer) mustEmbedUnimplementedConfluenceServer() {}

// UnsafeConfluenceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ConfluenceServer will
// result in compilation errors.
type UnsafeConfluenceServer interface {
	mustEmbedUnimplementedConfluenceServer()
}

func RegisterConfluenceServer(s grpc.ServiceRegistrar, srv ConfluenceServer) {
	s.RegisterService(&Confluence_ServiceDesc, srv)
}

func _Confluence_GetPage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PageReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfluenceServer).GetPage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Confluence_GetPage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfluenceServer).GetPage(ctx, req.(*PageReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Confluence_CreatePage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PageCreateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfluenceServer).CreatePage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Confluence_CreatePage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfluenceServer).CreatePage(ctx, req.(*PageCreateReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Confluence_ServiceDesc is the grpc.ServiceDesc for Confluence service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Confluence_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Confluence",
	HandlerType: (*ConfluenceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetPage",
			Handler:    _Confluence_GetPage_Handler,
		},
		{
			MethodName: "CreatePage",
			Handler:    _Confluence_CreatePage_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "confluence.proto",
}
